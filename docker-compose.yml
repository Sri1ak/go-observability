services:
  zookeeper:
    networks:
      - observability_net
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka1:
    networks:
      - observability_net
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka1
    hostname: kafka1
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9192:9092"
    environment:
      KAFKA_BROKER_ID: 11
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9192,PLAINTEXT_INTERNAL://kafka1:19092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2

  kafka2:
    networks:
      - observability_net
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka2
    hostname: kafka2
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9193:9093"
    environment:
      KAFKA_BROKER_ID: 12
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9193,PLAINTEXT_INTERNAL://kafka2:19093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093,PLAINTEXT_INTERNAL://0.0.0.0:19093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
  log-generator:
    networks:
      - observability_net
    build:
      context: .
    command: ["./producer"]
    environment:
      - METRICS_PORT=2113
    volumes:
    - ./input.log:/app/input.log
    ports:
      - "2113:2113"
    depends_on:
      - kafka1
      - kafka2
  stream-processor:
    networks:
      - observability_net
    build:
      context: .
    command: ["./consumer"]
    environment:
      - METRICS_PORT=2114
    ports:
      - "2114:2114"
    depends_on:
      - kafka1
      - kafka2
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - observability_net
  grafana:
    image: grafana/grafana-oss:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    networks:
      - observability_net
networks:
  observability_net:
    driver: bridge